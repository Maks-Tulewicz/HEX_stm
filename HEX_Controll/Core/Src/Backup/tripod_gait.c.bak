/*
 * tripod_gait.c - Tripod gait dla hexapoda
 *
 * Tripod = najbardziej stabilny chód hexapoda
 * - Zawsze 3 nogi na ziemi (trójkąt stabilności)
 * - Grupa A: nogi 1,4,5 (lewa przednia, prawa środkowa, lewa tylna)
 * - Grupa B: nogi 2,3,6 (prawa przednia, lewa środkowa, prawa tylna)
 *
 * Fazy:
 * 1. Grupa A robi SWING (krok do przodu) + Grupa B robi STANCE (przesuw robota)
 * 2. Grupa B robi SWING (krok do przodu) + Grupa A robi STANCE (przesuw robota)
 */

#include "tripod_gait.h"
#include <stdio.h>
#include <math.h>

// Konfiguracja tripod gait - BEZPIECZNE CZASY Z DUŻĄ PŁYNNOŚCIĄ
TripodConfig_t tripod_config = {
    .step_length = 6.0f,       // Długość kroku [cm]
    .lift_height = 4.0f,       // Wysokość podniesienia [cm]
    .swing_duration_ms = 450,  // 150ms swing - BEZPIECZNE dla serw
    .stance_duration_ms = 450, // 150ms stance - BEZPIECZNE dla serw
    .swing_points = 150,       // DUŻO punktów dla płynności
    .stance_points = 150,      // DUŻO punktów dla płynności
    .step_height_base = -24.0f // Bazowa wysokość stania [cm]
};

// Pozycje bazowe nóg - skopiowane z hexapod_kinematics.c
static const float base_positions[6][3] = {
    {18.0f, -15.0f, -24.0f},  // Noga 1 - lewa przednia
    {-18.0f, -15.0f, -24.0f}, // Noga 2 - prawa przednia
    {22.0f, 0.0f, -24.0f},    // Noga 3 - lewa środkowa
    {-22.0f, 0.0f, -24.0f},   // Noga 4 - prawa środkowa
    {18.0f, 15.0f, -24.0f},   // Noga 5 - lewa tylna
    {-18.0f, 15.0f, -24.0f}   // Noga 6 - prawa tylna
};

// Mapowanie kanałów PCA9685 z offsetami biodra z URDF
typedef struct
{
    uint8_t base_channel; // Bazowy kanał (hip = base, knee = base+1, ankle = base+2)
    float hip_offset_deg; // Offset biodra [stopnie] - Z URDF JOINT LIMITS
    bool is_left_side;    // true = I2C1 (lewe nogi), false = I2C2 (prawe nogi)
} LegMapping_t;

static const LegMapping_t leg_mapping[6] = {
    {0, -37.5f, true}, // Noga 1: I2C1, kanały 0-2, offset -37.5°
    {0, 37.5f, false}, // Noga 2: I2C2, kanały 0-2, offset +37.5°
    {3, 0.0f, true},   // Noga 3: I2C1, kanały 3-5, bez offsetu - TWOJA TESTOWA
    {3, 0.0f, false},  // Noga 4: I2C2, kanały 3-5, bez offsetu
    {6, 37.5f, true},  // Noga 5: I2C1, kanały 6-8, offset +37.5°
    {6, -37.5f, false} // Noga 6: I2C2, kanały 6-8, offset -37.5°
};

/**
 * @brief Interpolacja kubiczna (smooth step)
 */
static float cubicInterpolation(float t)
{
    if (t <= 0.0f)
        return 0.0f;
    if (t >= 1.0f)
        return 1.0f;
    return t * t * (3.0f - 2.0f * t);
}

/**
 * @brief Interpolacja liniowa
 */
static float lerp(float start, float end, float t)
{
    return start + (end - start) * t;
}

/**
 * @brief Ustaw kanały serw dla nogi z offsetem biodra
 */
static void setLegJointsWithOffset(int leg_number, float q1, float q2, float q3,
                                   PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2)
{
    if (leg_number < 1 || leg_number > 6)
    {
        printf("❌ Nieprawidłowy numer nogi: %d\n", leg_number);
        return;
    }

    // Pobierz mapowanie dla nogi
    const LegMapping_t *mapping = &leg_mapping[leg_number - 1];

    // Wybierz odpowiednią PCA
    PCA9685_Handle_t *pca_to_use = mapping->is_left_side ? pca1 : pca2;

    if (pca_to_use == NULL)
    {
        printf("⚠️  PCA dla nogi %d niedostępne (kanały %d-%d)\n",
               leg_number, mapping->base_channel, mapping->base_channel + 2);
        return;
    }

    // Konwersja radianów na stopnie z offsetem
    float hip_deg = (q1 * 180.0f / M_PI) + mapping->hip_offset_deg;
    float knee_deg = q2 * 180.0f / M_PI;
    float ankle_deg = q3 * 180.0f / M_PI;

    // Mapowanie na pozycje serw (90° = neutralne)
    float servo_hip = 90.0f + hip_deg;
    float servo_knee = 90.0f + knee_deg;
    float servo_ankle = 90.0f + ankle_deg;

    // Ograniczenia serw
    if (servo_hip < 0.0f)
        servo_hip = 0.0f;
    if (servo_hip > 180.0f)
        servo_hip = 180.0f;
    if (servo_knee < 0.0f)
        servo_knee = 0.0f;
    if (servo_knee > 180.0f)
        servo_knee = 180.0f;
    if (servo_ankle < 0.0f)
        servo_ankle = 0.0f;
    if (servo_ankle > 180.0f)
        servo_ankle = 180.0f;

    printf("Noga %d [kanały %d-%d]: IK[%.1f°, %.1f°, %.1f°] + offset[%.1f°] -> Servo[%.1f°, %.1f°, %.1f°]\n",
           leg_number, mapping->base_channel, mapping->base_channel + 2,
           hip_deg - mapping->hip_offset_deg, knee_deg, ankle_deg, mapping->hip_offset_deg,
           servo_hip, servo_knee, servo_ankle);

    // Ustaw serwa
    PCA9685_SetServoAngle(pca_to_use, mapping->base_channel + 0, servo_hip);   // Hip
    PCA9685_SetServoAngle(pca_to_use, mapping->base_channel + 1, servo_knee);  // Knee
    PCA9685_SetServoAngle(pca_to_use, mapping->base_channel + 2, servo_ankle); // Ankle
}

/**
 * @brief Oblicz docelową pozycję dla kroku w danym kierunku
 */
static void calculateTargetPosition(int leg_number, TripodDirection_t direction,
                                    float *target_x, float *target_y, float *target_z)
{
    // Pozycja bazowa
    float base_x = base_positions[leg_number - 1][0];
    float base_y = base_positions[leg_number - 1][1];
    float base_z = base_positions[leg_number - 1][2];

    *target_x = base_x;
    *target_y = base_y;
    *target_z = base_z;

    // Modyfikacja na podstawie kierunku
    switch (direction)
    {
    case TRIPOD_FORWARD:
        *target_y = base_y - tripod_config.step_length; // Do przodu (Y-)
        break;
    case TRIPOD_BACKWARD:
        *target_y = base_y + tripod_config.step_length; // Do tyłu (Y+)
        break;
    case TRIPOD_LEFT:
        *target_x = base_x + tripod_config.step_length; // W lewo (X+)
        break;
    case TRIPOD_RIGHT:
        *target_x = base_x - tripod_config.step_length; // W prawo (X-)
        break;
    case TRIPOD_TURN_LEFT:
        // Obrót w lewo - przednie nogi w lewo, tylne w prawo
        if (leg_number == 1 || leg_number == 2)
        {
            *target_x = base_x + tripod_config.step_length; // Przednie w lewo
        }
        else if (leg_number == 5 || leg_number == 6)
        {
            *target_x = base_x - tripod_config.step_length; // Tylne w prawo
        }
        break;
    case TRIPOD_TURN_RIGHT:
        // Obrót w prawo - przednie nogi w prawo, tylne w lewo
        if (leg_number == 1 || leg_number == 2)
        {
            *target_x = base_x - tripod_config.step_length; // Przednie w prawo
        }
        else if (leg_number == 5 || leg_number == 6)
        {
            *target_x = base_x + tripod_config.step_length; // Tylne w lewo
        }
        break;
    default:
        break;
    }
}

/**
 * @brief Wykonaj jeden punkt swing phase dla nogi
 */
static void executeSwingPoint(int leg_number, TripodDirection_t direction,
                              float t, float smooth_t, PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2)
{
    float base_x = base_positions[leg_number - 1][0];
    float base_y = base_positions[leg_number - 1][1];
    float base_z = base_positions[leg_number - 1][2];

    // Pozycja startowa (tylna)
    float start_x = base_x;
    float start_y = base_y;

    switch (direction)
    {
    case TRIPOD_FORWARD:
        start_y = base_y + tripod_config.step_length;
        break;
    case TRIPOD_BACKWARD:
        start_y = base_y - tripod_config.step_length;
        break;
    case TRIPOD_LEFT:
        start_x = base_x - tripod_config.step_length;
        break;
    case TRIPOD_RIGHT:
        start_x = base_x + tripod_config.step_length;
        break;
    case TRIPOD_TURN_LEFT:
        if (leg_number == 1 || leg_number == 2)
        {
            start_x = base_x - tripod_config.step_length;
        }
        else if (leg_number == 5 || leg_number == 6)
        {
            start_x = base_x + tripod_config.step_length;
        }
        break;
    case TRIPOD_TURN_RIGHT:
        if (leg_number == 1 || leg_number == 2)
        {
            start_x = base_x + tripod_config.step_length;
        }
        else if (leg_number == 5 || leg_number == 6)
        {
            start_x = base_x - tripod_config.step_length;
        }
        break;
    default:
        break;
    }

    // Pozycja docelowa (przednia)
    float target_x, target_y, target_z;
    calculateTargetPosition(leg_number, direction, &target_x, &target_y, &target_z);

    // Interpolacja pozycji
    float current_x = lerp(start_x, target_x, smooth_t);
    float current_y = lerp(start_y, target_y, smooth_t);

    // Trajektoria łuku
    float arc_height = 4.0f * tripod_config.lift_height * t * (1.0f - t);
    float current_z = base_z - arc_height;

    // Oblicz IK i ustaw serwa
    float q1, q2, q3;
    if (computeLegIK(leg_number, current_x, current_y, current_z, &q1, &q2, &q3))
    {
        setLegJointsWithOffset(leg_number, q1, q2, q3, pca1, pca2);
    }
}

/**
 * @brief Wykonaj jeden punkt stance phase dla nogi
 */
static void executeStancePoint(int leg_number, TripodDirection_t direction,
                               float t, float smooth_t, PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2)
{
    float base_x = base_positions[leg_number - 1][0];
    float base_y = base_positions[leg_number - 1][1];
    float base_z = base_positions[leg_number - 1][2];

    // Pozycja startowa (przednia)
    float start_x, start_y, start_z;
    calculateTargetPosition(leg_number, direction, &start_x, &start_y, &start_z);

    // Pozycja końcowa (tylna)
    float end_x = base_x;
    float end_y = base_y;

    switch (direction)
    {
    case TRIPOD_FORWARD:
        end_y = base_y + tripod_config.step_length;
        break;
    case TRIPOD_BACKWARD:
        end_y = base_y - tripod_config.step_length;
        break;
    case TRIPOD_LEFT:
        end_x = base_x - tripod_config.step_length;
        break;
    case TRIPOD_RIGHT:
        end_x = base_x + tripod_config.step_length;
        break;
    case TRIPOD_TURN_LEFT:
        if (leg_number == 1 || leg_number == 2)
        {
            end_x = base_x - tripod_config.step_length;
        }
        else if (leg_number == 5 || leg_number == 6)
        {
            end_x = base_x + tripod_config.step_length;
        }
        break;
    case TRIPOD_TURN_RIGHT:
        if (leg_number == 1 || leg_number == 2)
        {
            end_x = base_x + tripod_config.step_length;
        }
        else if (leg_number == 5 || leg_number == 6)
        {
            end_x = base_x - tripod_config.step_length;
        }
        break;
    default:
        break;
    }

    // Interpolacja pozycji (po ziemi)
    float current_x = lerp(start_x, end_x, smooth_t);
    float current_y = lerp(start_y, end_y, smooth_t);
    float current_z = base_z; // Zawsze na ziemi

    // Oblicz IK i ustaw serwa
    float q1, q2, q3;
    if (computeLegIK(leg_number, current_x, current_y, current_z, &q1, &q2, &q3))
    {
        setLegJointsWithOffset(leg_number, q1, q2, q3, pca1, pca2);
    }
}

/**
 * @brief Wykonaj jeden cykl tripod gait - SZYBKI TIMING
 */
bool tripodGaitCycle(PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2, TripodDirection_t direction)
{
    printf("\n=== TRIPOD GAIT CYCLE - SZYBKI ===\n");
    printf("Kierunek: %s\n", (direction == TRIPOD_FORWARD) ? "PRZÓD" : (direction == TRIPOD_BACKWARD) ? "TYŁ"
                                                                   : (direction == TRIPOD_LEFT)       ? "LEWO"
                                                                   : (direction == TRIPOD_RIGHT)      ? "PRAWO"
                                                                   : (direction == TRIPOD_TURN_LEFT)  ? "OBRÓT LEWO"
                                                                                                      : "OBRÓT PRAWO");

    // FAZA 1: Grupa A (1,4,5) SWING równocześnie z Grupa B (2,3,6) STANCE
    printf("\n--- FAZA 1: Grupa A swing + Grupa B stance ---\n");

    // Oblicz maksymalną liczbę punktów
    int max_points = (tripod_config.swing_points > tripod_config.stance_points) ? tripod_config.swing_points : tripod_config.stance_points;

    // SZYBKI TIMING - bez mikrosekund, tylko HAL_Delay
    uint32_t total_duration_ms = (tripod_config.swing_duration_ms > tripod_config.stance_duration_ms) ? tripod_config.swing_duration_ms : tripod_config.stance_duration_ms;

    // Jeśli czas < 10ms, nie używaj delay wcale - maksymalna prędkość!
    bool use_delay = (total_duration_ms >= 10);
    uint32_t point_delay_ms = use_delay ? (total_duration_ms / max_points) : 0;

    printf("Timing: total=%lums, points=%d, delay=%lums, use_delay=%s\n",
           total_duration_ms, max_points, point_delay_ms, use_delay ? "YES" : "NO");
    printf("I2C1: %s, I2C2: %s\n",
           (pca1 != NULL) ? "CONNECTED" : "NULL",
           (pca2 != NULL) ? "CONNECTED" : "NULL");

    // RÓWNOCZESNA interpolacja obu grup - FAZA 1
    for (int i = 0; i <= max_points; i++)
    {
        float swing_t = (float)i / (float)tripod_config.swing_points;
        float stance_t = (float)i / (float)tripod_config.stance_points;

        // Ograniczenie parametru t do [0,1]
        if (swing_t > 1.0f)
            swing_t = 1.0f;
        if (stance_t > 1.0f)
            stance_t = 1.0f;

        float swing_smooth_t = cubicInterpolation(swing_t);
        float stance_smooth_t = cubicInterpolation(stance_t);

        // === GRUPA A - SWING (1,4,5) ===
        if (swing_t <= 1.0f)
        {
            executeSwingPoint(1, direction, swing_t, swing_smooth_t, pca1, pca2);
            executeSwingPoint(4, direction, swing_t, swing_smooth_t, pca1, pca2);
            executeSwingPoint(5, direction, swing_t, swing_smooth_t, pca1, pca2);
        }

        // === GRUPA B - STANCE (2,3,6) ===
        if (stance_t <= 1.0f)
        {
            executeStancePoint(2, direction, stance_t, stance_smooth_t, pca1, pca2);
            executeStancePoint(3, direction, stance_t, stance_smooth_t, pca1, pca2); // TWOJA TESTOWA
            executeStancePoint(6, direction, stance_t, stance_smooth_t, pca1, pca2);
        }

        // DELAY tylko jeśli potrzebny
        if (use_delay && point_delay_ms > 0)
        {
            HAL_Delay(point_delay_ms);
        }
        // Bez delay = maksymalna prędkość ograniczona tylko I2C i obliczeniami!
    }

    // FAZA 2: Grupa B (2,3,6) SWING równocześnie z Grupa A (1,4,5) STANCE
    printf("\n--- FAZA 2: Grupa B swing + Grupa A stance ---\n");

    // RÓWNOCZESNA interpolacja obu grup - FAZA 2
    for (int i = 0; i <= max_points; i++)
    {
        float swing_t = (float)i / (float)tripod_config.swing_points;
        float stance_t = (float)i / (float)tripod_config.stance_points;

        if (swing_t > 1.0f)
            swing_t = 1.0f;
        if (stance_t > 1.0f)
            stance_t = 1.0f;

        float swing_smooth_t = cubicInterpolation(swing_t);
        float stance_smooth_t = cubicInterpolation(stance_t);

        // === GRUPA B - SWING (2,3,6) ===
        if (swing_t <= 1.0f)
        {
            executeSwingPoint(2, direction, swing_t, swing_smooth_t, pca1, pca2);
            executeSwingPoint(3, direction, swing_t, swing_smooth_t, pca1, pca2); // TWOJA TESTOWA
            executeSwingPoint(6, direction, swing_t, swing_smooth_t, pca1, pca2);
        }

        // === GRUPA A - STANCE (1,4,5) ===
        if (stance_t <= 1.0f)
        {
            executeStancePoint(1, direction, stance_t, stance_smooth_t, pca1, pca2);
            executeStancePoint(4, direction, stance_t, stance_smooth_t, pca1, pca2);
            executeStancePoint(5, direction, stance_t, stance_smooth_t, pca1, pca2);
        }

        // DELAY tylko jeśli potrzebny
        if (use_delay && point_delay_ms > 0)
        {
            HAL_Delay(point_delay_ms);
        }
    }

    printf("\n✅ TRIPOD GAIT CYCLE ZAKOŃCZONY - SZYBKI\n");
    return true;
}

/**
 * @brief Wykonaj ciągłe chodzenie (wiele cykli)
 */
bool tripodGaitWalk(PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2,
                    TripodDirection_t direction, int num_cycles)
{
    printf("\n=== TRIPOD GAIT WALK START - PEŁNY HEXAPOD ===\n");
    printf("Liczba cykli: %d\n", num_cycles);
    printf("Konfiguracja: krok=%.1fcm, podniesienie=%.1fcm, swing/stance=%lums/%lums, punkty=%d/%d\n",
           tripod_config.step_length, tripod_config.lift_height,
           tripod_config.swing_duration_ms, tripod_config.stance_duration_ms,
           tripod_config.swing_points, tripod_config.stance_points);
    printf("I2C Status: I2C1=%s, I2C2=%s\n",
           (pca1 != NULL) ? "OK" : "NULL",
           (pca2 != NULL) ? "OK" : "NULL");

    for (int cycle = 0; cycle < num_cycles; cycle++)
    {
        printf("\n>>> CYKL %d/%d <<<\n", cycle + 1, num_cycles);

        bool success = tripodGaitCycle(pca1, pca2, direction);
        if (!success)
        {
            printf("❌ Błąd w cyklu %d\n", cycle + 1);
            return false;
        }

        HAL_Delay(100); // Krótka pauza między cyklami
    }

    printf("\n✅ TRIPOD GAIT WALK ZAKOŃCZONY\n");
    return true;
}

/**
 * @brief Ustaw konfigurację tripod gait
 */
void setTripodConfig(float step_length, float lift_height,
                     uint32_t swing_duration, uint32_t stance_duration,
                     int swing_points, int stance_points)
{
    tripod_config.step_length = step_length;
    tripod_config.lift_height = lift_height;
    tripod_config.swing_duration_ms = swing_duration;
    tripod_config.stance_duration_ms = stance_duration;
    tripod_config.swing_points = swing_points;
    tripod_config.stance_points = stance_points;

    printf("✅ Konfiguracja tripod zaktualizowana: krok=%.1fcm, podniesienie=%.1fcm, swing/stance=%lums/%lums, punkty=%d/%d\n",
           step_length, lift_height, swing_duration, stance_duration, swing_points, stance_points);
}

/**
 * @brief Wyświetl aktualną konfigurację
 */
void printTripodConfig(void)
{
    printf("\n=== KONFIGURACJA TRIPOD GAIT ===\n");
    printf("Długość kroku: %.1f cm\n", tripod_config.step_length);
    printf("Wysokość podniesienia: %.1f cm\n", tripod_config.lift_height);
    printf("Czas swing: %lu ms\n", tripod_config.swing_duration_ms);
    printf("Czas stance: %lu ms\n", tripod_config.stance_duration_ms);
    printf("Punkty swing: %d\n", tripod_config.swing_points);
    printf("Punkty stance: %d\n", tripod_config.stance_points);
    printf("Wysokość bazowa: %.1f cm\n", tripod_config.step_height_base);
    printf("===============================\n");
}