/**
 * @file bipedal_gait.h
 * @brief Algorytm chodu bipedal (dwuno≈ºny) dla robota hexapod
 *
 * @details
 * Implementacja ≈õrednio-szybkiego chodu hexapoda bazujƒÖcego na ruchu par n√≥g.
 * Bipedal gait charakteryzuje siƒô sekwencyjnym ruchem trzech par n√≥g,
 * z fazƒÖ stance shift dla wszystkich pozosta≈Çych n√≥g miƒôdzy ka≈ºdym krokiem pary.
 *
 * @section bipedal_concept Koncepcja bipedal gait
 *
 * **Podzia≈Ç n√≥g na pary:**
 * ```
 * Para 0: 1,4    Para 1: 2,5    Para 2: 3,6
 *
 *   1‚óè‚îÄ‚îÄ‚îÄ‚îÄ‚óè2    ‚Üê Para 0,1
 *     ‚îÇ    ‚îÇ
 *   4‚óè    ‚óè5    ‚Üê Para 0,2
 *     ‚îÇ    ‚îÇ
 *   3‚óè‚îÄ‚îÄ‚îÄ‚îÄ‚óè6    ‚Üê Para 1,2
 * ```
 *
 * **Sekwencja ruchu (2-fazowa):**
 * 1. **SWING Phase**: Para X robi krok (obecna pozycja ‚Üí pozycja przednia)
 * 2. **STANCE SHIFT Phase**: WSZYSTKIE nogi przesuwajƒÖ siƒô o 1/3 step_length do ty≈Çu
 * 3. Powt√≥rzenie dla kolejnej pary (0‚Üí1‚Üí2‚Üí0...)
 *
 * **Zalety:**
 * - ‚ö° **Ultra szybki** (wy≈ÇƒÖczone delay - ~60ms na cykl)
 * - üîí **Stabilny** (zawsze 4 nogi na ziemi podczas stance)
 * - üéØ **Efektywny** energetycznie
 * - üìê **Dobra kontrola** kierunku ruchu
 *
 * **Wady:**
 * - üîß Bardziej z≈Ço≈ºony algorytm ni≈º tripod
 * - ‚öñÔ∏è Wymaga precyzyjnej synchronizacji stance shift
 * - üèîÔ∏è Mniej stabilny ni≈º wave gait
 *
 * @section algorithm_details Szczeg√≥≈Çy algorytmu
 *
 * **Kluczowa innowacja - 2-fazowy cycle:**
 *
 * Tradycyjny bipedal u≈ºywa≈Ç 6 faz (po jednej na parƒô + stance ka≈ºdej).
 * Ten algorytm u≈ºywa 2 faz na parƒô:
 *
 * 1. **SWING faza pary:**
 *    - Para X: podnosi siƒô ‚Üí ≈Çuk ‚Üí opuszcza w pozycji przedniej
 *    - Pozosta≈Çe 4 nogi: stojƒÖ bez ruchu w obecnych pozycjach
 *
 * 2. **STANCE SHIFT wszystkich:**
 *    - WSZYSTKIE 6 n√≥g: przesuw o 1/3 step_length do ty≈Çu po ziemi
 *    - Efekt: robot przesuwa siƒô do przodu wzglƒôdem n√≥g
 *
 * **Matematyka stance shift:**
 * ```
 * stance_shift = step_length / 3.0f
 *
 * Po 3 parach: 3 √ó (1/3) = 1 √ó step_length
 * ‚Üí Robot przesunƒÖ≈Ç siƒô o pe≈ÇnƒÖ d≈Çugo≈õƒá kroku
 * ```
 *
 * @section ultra_speed_mode Ultra Speed Mode
 *
 * **Radykalne optymalizacje prƒôdko≈õci:**
 * -  **Wy≈ÇƒÖczone ALL HAL_Delay()** w pƒôtlach interpolacji
 * -  **20 punkt√≥w interpolacji** swing (by≈Ço 50)
 * -  **10 punkt√≥w interpolacji** stance (by≈Ço 20)
 * -  **50ms swing + 20ms stance** = 70ms na parƒô
 * -  **210ms na pe≈Çny cykl** (3 pary √ó 70ms)
 *
 * **Por√≥wnanie prƒôdko≈õci:**
 * | Mode | Swing | Stance | Punkty | Cykl | Delay |
 * |------|-------|--------|--------|------|-------|
 * | **Bezpieczny** | 150ms | 100ms | 50/20 | 750ms | Tak |
 * | **Ultra (current)** | 50ms | 20ms | 20/10 | 210ms | x |
 * | **Przyrost** | **3x** | **5x** | **2.5x** | **3.6x** | **‚àû** |
 *
 * @section pair_mapping Mapowanie par n√≥g
 *
 * **Para 0: Nogi 1,4 (Lewa przednia + Prawa ≈õrodkowa)**
 * - Geometria: Stabilny tr√≥jkƒÖt z nogami 2,3,5,6 na ziemi
 * - Offsety: +37.5¬∞ (noga 1) + 0¬∞ (noga 4)
 * - Charakterystyka: Dobra stabilno≈õƒá przednia
 *
 * **Para 1: Nogi 2,5 (Prawa przednia + Lewa tylna)**
 * - Geometria: Diagonalny tr√≥jkƒÖt stabilno≈õci
 * - Offsety: -37.5¬∞ (noga 2) + -37.5¬∞ (noga 5)
 * - Charakterystyka: Najd≈Çu≈ºsza baza podparcia
 *
 * **Para 2: Nogi 3,6 (Lewa ≈õrodkowa + Prawa tylna)**
 * - Geometria: Stabilny tr√≥jkƒÖt z nogami 1,2,4,5 na ziemi
 * - Offsety: 0¬∞ (noga 3) + +37.5¬∞ (noga 6)
 * - Charakterystyka: Dobra stabilno≈õƒá tylna
 *
 * @section movement_directions Kierunki ruchu
 *
 * | Kierunek | Modyfikacja wsp√≥≈Çrzƒôdnych | Efekt |
 * |----------|---------------------------|-------|
 * | **FORWARD** | Y -= step_length | Ruch do przodu |
 * | **BACKWARD** | Y += step_length | Ruch do ty≈Çu |
 * | **LEFT** | X += step_length | Ruch w lewo (sideways) |
 * | **RIGHT** | X -= step_length | Ruch w prawo (sideways) |
 *
 * @section hardware_integration Integracja sprzƒôtowa
 *
 * **Dual I2C Architecture:**
 * - **I2C1 ‚Üí PCA9685 #1**: Lewe nogi (1,3,5) - kana≈Çy 0-8
 * - **I2C2 ‚Üí PCA9685 #2**: Prawe nogi (2,4,6) - kana≈Çy 0-8
 *
 * **Mapowanie par na kontrolery:**
 * - **Para 0 (1,4)**: I2C1[0-2] + I2C2[3-5] - Cross-controller
 * - **Para 1 (2,5)**: I2C2[0-2] + I2C1[6-8] - Cross-controller
 * - **Para 2 (3,6)**: I2C1[3-5] + I2C2[6-8] - Cross-controller
 *
 * @section performance_analysis Analiza wydajno≈õci
 *
 * **Teoretyczna prƒôdko≈õƒá robota:**
 * ```
 * step_length = 4.0 cm
 * cycle_time = 210 ms (ultra mode)
 *
 * speed = step_length / cycle_time = 4.0cm / 0.21s = 19.0 cm/s
 *
 * vs Tripod: 6.0cm / 0.12s = 50.0 cm/s
 * vs Wave: 4.0cm / 0.36s = 11.1 cm/s
 * ```
 *
 * **Ranking prƒôdko≈õci:** Tripod > Bipedal > Wave
 *
 * **Ranking stabilno≈õci:** Wave > Bipedal > Tripod
 *
 * @author Maksymilian Tulewicz
 * @date 2025
 * @version 1.0
 *
 * @see hexapod_kinematics.h dla oblicze≈Ñ IK
 * @see tripod_gait.h dla por√≥wnania algorytm√≥w
 */

#ifndef BIPEDAL_GAIT_H
#define BIPEDAL_GAIT_H

#include "stm32f4xx_hal.h"
#include "pca9685.h"
#include "hexapod_kinematics.h"
#include <stdint.h>
#include <stdbool.h>

/**
 * @defgroup Bipedal_Types Typy i enumeracje
 * @{
 */

/**
 * @brief Kierunki ruchu w bipedal gait
 *
 * @details
 * Enum definiujƒÖcy dostƒôpne kierunki poruszania siƒô robota w trybie bipedal.
 * Bipedal gait nie implementuje obrot√≥w w miejscu (TURN_LEFT/RIGHT) -
 * dla obrot√≥w u≈ºyj tripod lub wave gait.
 */
typedef enum
{
    BIPEDAL_FORWARD = 0, ///< Ruch do przodu (Y -= step_length)
    BIPEDAL_BACKWARD,    ///< Ruch do ty≈Çu (Y += step_length)
    BIPEDAL_LEFT,        ///< Ruch w lewo - sideways (X += step_length)
    BIPEDAL_RIGHT        ///< Ruch w prawo - sideways (X -= step_length)
} BipedalDirection_t;

/**
 * @brief Konfiguracja parametr√≥w bipedal gait
 *
 * @details
 * Struktura zawierajƒÖca wszystkie konfigurowalne parametry algorytmu bipedal.
 * Ultra speed mode u≈ºywa drastycznie zredukowanych warto≈õci dla maksymalnej prƒôdko≈õci.
 *
 * **Ultra Speed Values (current):**
 * - step_length: 4.0 cm (bezpieczny kompromis)
 * - lift_height: 4.0 cm (wystarczajƒÖcy clearance)
 * - step_duration_ms: 50 ms (bardzo szybko!)
 * - step_points: 20 (minimum dla p≈Çynno≈õci)
 *
 * **Zalecane zakresy (bezpieczny mode):**
 * - step_length: 2.0-6.0 cm
 * - lift_height: 2.0-6.0 cm
 * - step_duration_ms: 100-300 ms
 * - step_points: 30-100
 */
typedef struct
{
    float step_length;         ///< D≈Çugo≈õƒá kroku [cm] - dystans przesuniƒôcia pary n√≥g
    float lift_height;         ///< Wysoko≈õƒá podniesienia [cm] - clearance nad ziemiƒÖ
    uint32_t step_duration_ms; ///< Czas swing jednej pary [ms] - ultra szybki: 50ms
    int step_points;           ///< Punkty interpolacji swing - ultra szybki: 20
    float step_height_base;    ///< Bazowa wysoko≈õƒá stania [cm] - pozycja Z w stance
} BipedalConfig_t;

/** @} */ // end of Bipedal_Types

/**
 * @defgroup Bipedal_Functions Funkcje publiczne API
 * @{
 */

/**
 * @brief Wykonaj jeden pe≈Çny cykl bipedal gait (3 pary n√≥g)
 *
 * @details
 * G≈Ç√≥wna funkcja algorytmu bipedal gait wykonujƒÖca jeden kompletny cykl
 * sk≈ÇadajƒÖcy siƒô z 3 krok√≥w par n√≥g. Ka≈ºdy krok pary to 2 fazy:
 *
 * **Sekwencja pe≈Çnego cyklu:**
 * 1. **Para 0 (1,4)**: SWING + STANCE SHIFT wszystkich
 * 2. **Para 1 (2,5)**: SWING + STANCE SHIFT wszystkich
 * 3. **Para 2 (3,6)**: SWING + STANCE SHIFT wszystkich
 *
 * **Szczeg√≥≈Çy ka≈ºdego kroku pary:**
 *
 * **FAZA SWING (50ms, 20 punkt√≥w):**
 * ```
 * for (para w [0,1,2]) {
 *   Para: podniesienie ‚Üí ≈Çuk ‚Üí opuszczenie (pozycja przednia)
 *   Pozosta≈Çe 4 nogi: bez ruchu (utrzymanie obecnej pozycji)
 * }
 * ```
 *
 * **FAZA STANCE SHIFT (20ms, 10 punkt√≥w):**
 * ```
 * WSZYSTKIE 6 n√≥g: przesuw o 1/3 step_length do ty≈Çu po ziemi
 * Efekt: robot przesuwa siƒô do przodu wzglƒôdem otoczenia
 * ```
 *
 * **Automatyczna inicjalizacja pozycji:**
 * - Pierwsze wywo≈Çanie inicjalizuje pozycje n√≥g
 * - Trackowanie pozycji Y ka≈ºdej nogi w runtime
 * - Automatyczna korekcja dryfu pozycyjnego
 *
 * @param[in] pca1 Wska≈∫nik na kontroler lewych n√≥g (I2C1) lub NULL
 * @param[in] pca2 Wska≈∫nik na kontroler prawych n√≥g (I2C2) lub NULL
 * @param[in] direction Kierunek ruchu (BIPEDAL_FORWARD, BACKWARD, LEFT, RIGHT)
 *
 * @return true Cykl wykonany pomy≈õlnie
 * @return false B≈ÇƒÖd podczas wykonywania (IK failuje, I2C error)
 *
 * @note Funkcja automatycznie sprawdza dostƒôpno≈õƒá kontroler√≥w
 * @note W przypadku NULL dla pca1/pca2 - odpowiednie nogi sƒÖ pomijane
 * @warning Ultra speed mode mo≈ºe byƒá niestabilny na nier√≥wnym terenie
 *
 * @code{.c}
 * // Jeden ultra szybki cykl do przodu
 * if (!bipedalGaitCycle(&pca1, &pca2, BIPEDAL_FORWARD)) {
 *     printf("B≈ÇƒÖd w cyklu bipedal!\n");
 * }
 *
 * // Ruch w lewo (sideways)
 * bipedalGaitCycle(&pca1, &pca2, BIPEDAL_LEFT);
 * @endcode
 *
 * @see setBipedalConfig() dla dostrajania prƒôdko≈õci
 * @see bipedalGaitWalk() dla ciƒÖg≈Çego chodzenia
 */
bool bipedalGaitCycle(PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2, BipedalDirection_t direction);

/**
 * @brief Wykonaj ciƒÖg≈Çe chodzenie bipedal (wiele cykli)
 *
 * @details
 * Funkcja wysokiego poziomu wykonujƒÖca okre≈õlonƒÖ liczbƒô cykli bipedal gait
 * z ultra speed optimizations. Najszybszy spos√≥b poruszania siƒô po
 * p≈Çaskim terenie (po tripod gait).
 *
 * **Sekwencja dzia≈Çania:**
 * 1. Wy≈õwietlenie informacji o konfiguracji ultra speed
 * 2. Sprawdzenie statusu dual I2C controllers
 * 3. Wykonanie num_cycles ultra szybkich cykli
 * 4. Minimalne pauzy miƒôdzy cyklami (50ms)
 * 5. Raportowanie ca≈Çkowitego czasu wykonania
 *
 * **Performance Characteristics:**
 * ```
 * 1 cycle = 3 pairs √ó 70ms = 210ms
 * 5 cycles = 5 √ó 210ms + 4 √ó 50ms = 1.25s
 * Distance = 5 √ó 4.0cm = 20cm
 * Speed = 20cm / 1.25s = 16 cm/s
 * ```
 *
 * **Error Handling:**
 * - Stop na pierwszym b≈Çƒôdzie cyklu
 * - Szczeg√≥≈Çowe logi przyczyny b≈Çƒôdu
 * - Bezpieczne zatrzymanie w ostatniej pozycji
 * - Mo≈ºliwo≈õƒá kontynuacji po naprawie b≈Çƒôdu
 *
 * @param[in] pca1 Wska≈∫nik na kontroler lewych n√≥g (I2C1)
 * @param[in] pca2 Wska≈∫nik na kontroler prawych n√≥g (I2C2)
 * @param[in] direction Kierunek ruchu przez wszystkie cykle
 * @param[in] num_cycles Liczba cykli (1-20 zalecane dla ultra speed)
 *
 * @return true Wszystkie cykle wykonane pomy≈õlnie
 * @return false B≈ÇƒÖd w kt√≥rym≈õ z cykli (szczeg√≥≈Çy w logach)
 *
 * @note Czas blokowania: num_cycles √ó 210ms + (num_cycles-1) √ó 50ms
 * @note Ultra speed mo≈ºe powodowaƒá przegrzanie serw przy d≈Çugich sesjach
 * @warning Nie zalecane >10 cykli bez pauzy ch≈ÇodzƒÖcej
 *
 * @code{.c}
 * // Ultra szybki sprint (3 cykle = ~60cm)
 * bipedalGaitWalk(&pca1, &pca2, BIPEDAL_FORWARD, 3);
 *
 * // ≈öredni spacer z ch≈Çodzeniem
 * for (int i = 0; i < 3; i++) {
 *     bipedalGaitWalk(&pca1, &pca2, BIPEDAL_FORWARD, 5);
 *     HAL_Delay(2000); // Cooling break
 * }
 *
 * // Quick sideways maneuver
 * bipedalGaitWalk(&pca1, &pca2, BIPEDAL_LEFT, 2);
 * @endcode
 *
 * @see bipedalGaitCycle() wykonywana wewnƒôtrznie
 */
bool bipedalGaitWalk(PCA9685_Handle_t *pca1, PCA9685_Handle_t *pca2,
                     BipedalDirection_t direction, int num_cycles);

/**
 * @brief Ustaw konfiguracjƒô bipedal gait w runtime
 *
 * @details
 * Funkcja pozwalajƒÖca na dostrajanie parametr√≥w ultra speed mode
 * lub prze≈ÇƒÖczenie na bardziej konserwatywne ustawienia.
 *
 * **Predefiniowane zestawy:**
 *
 * **Ultra Speed (current):**
 * ```c
 * setBipedalConfig(4.0f, 4.0f, 50, 20);
 * // Efekt: Maksymalna prƒôdko≈õƒá, akceptowalna p≈Çynno≈õƒá
 * ```
 *
 * **Balanced Mode:**
 * ```c
 * setBipedalConfig(5.0f, 4.0f, 100, 40);
 * // Efekt: Dobra prƒôdko≈õƒá + lepsza p≈Çynno≈õƒá
 * ```
 *
 * **Safe Mode:**
 * ```c
 * setBipedalConfig(3.0f, 5.0f, 150, 60);
 * // Efekt: Bezpieczny na nier√≥wnym terenie
 * ```
 *
 * **Wp≈Çyw parametr√≥w:**
 * - **‚Üë step_length**: Wiƒôksze kroki = szybsze przemieszczanie
 * - **‚Üë lift_height**: Wy≈ºszy clearance = bezpieczniej
 * - **‚Üì step_duration_ms**: Szybsze ruchy = mniej stabilne
 * - **‚Üë step_points**: P≈Çynniejsze = wolniejsze
 *
 * @param[in] step_length D≈Çugo≈õƒá kroku [cm] (1.0-8.0)
 * @param[in] lift_height Wysoko≈õƒá podniesienia [cm] (1.0-8.0)
 * @param[in] step_duration Czas swing [ms] (20-300)
 * @param[in] step_points Punkty interpolacji (10-100)
 *
 * @note Zmiany globalne - dotyczƒÖ wszystkich kolejnych cykli
 * @note Funkcja loguje nowƒÖ konfiguracjƒô
 * @warning Ekstremalne warto≈õci mogƒÖ destabilizowaƒá robota
 *\
 *
 * @see printBipedalConfig() dla sprawdzenia aktualnych ustawie≈Ñ
 */
void setBipedalConfig(float step_length, float lift_height,
                      uint32_t step_duration, int step_points);

/**
 * @brief Wy≈õwietl aktualnƒÖ konfiguracjƒô bipedal gait
 *
 * @details
 * Funkcja diagnostyczna wypisujƒÖca kompletne informacje o aktualnej
 * konfiguracji ultra speed bipedal gait oraz charakterystykƒô algorytmu.
 *
 * **Wy≈õwietlane informacje:**
 * - Wszystkie parametry konfiguracyjne
 * - Status ultra speed mode vs safe mode
 * - Szacowany czas cyklu i prƒôdko≈õƒá robota
 * - Opis algorytmu 2-fazowego (swing + stance shift)
 * - Mapowanie par n√≥g i offsety bioder
 * - Por√≥wnanie z innymi algorytmami (tripod, wave)
 *
 * **Przyk≈Çad output:**
 * ```
 * === KONFIGURACJA BIPEDAL GAIT ===
 * D≈Çugo≈õƒá kroku: 4.0 cm
 * Wysoko≈õƒá podniesienia: 4.0 cm
 * Czas swing: 50 ms
 * Punkty interpolacji: 20
 * ALGORYTM: 2-PHASE (swing + stance shift wszystkich n√≥g)
 * STABILNO≈öƒÜ: 4 nogi na ziemi podczas stance
 * PRƒòDKO≈öƒÜ: Szybka (bez delay)
 * ================================
 * ```
 *
 * @note Funkcja tylko wy≈õwietla - nie modyfikuje konfiguracji
 * @note Output przez printf() (UART2 w tym projekcie)
 *
 * @code{.c}
 * // Sprawdzenie przed testem wydajno≈õci
 * printf("=== DIAGNOSTYKA BIPEDAL ===\n");
 * printBipedalConfig();
 * printf("===========================\n");
 * @endcode
 *
 * @see setBipedalConfig() dla modyfikacji ustawie≈Ñ
 */
void printBipedalConfig(void);

/** @} */ // end of Bipedal_Functions

/**
 * @defgroup Bipedal_Implementation Szczeg√≥≈Çy implementacji
 * @{
 */

/**
 * @brief Wewnƒôtrzne ≈õledzenie pozycji n√≥g
 *
 * @details
 * Algorytm bipedal musi ≈õledziƒá aktualnƒÖ pozycjƒô Y ka≈ºdej nogi,
 * poniewa≈º stance shift modyfikuje pozycje wszystkich n√≥g r√≥wnocze≈õnie.
 *
 * **Static variables (wewnƒôtrzne):**
 * ```c
 * static float leg_current_y[6];          // Aktualne pozycje Y
 * static bool positions_initialized;      // Flaga inicjalizacji
 * ```
 *
 * **Inicjalizacja przy pierwszym u≈ºyciu:**
 * ```c
 * if (!positions_initialized) {
 *     for (int i = 0; i < 6; i++) {
 *         leg_current_y[i] = base_positions[i][1]; // Pozycje bazowe
 *     }
 *     positions_initialized = true;
 * }
 * ```
 *
 * **Aktualizacja po ka≈ºdym stance shift:**
 * ```c
 * stance_shift = step_length / 3.0f;
 * for (int leg = 1; leg <= 6; leg++) {
 *     leg_current_y[leg-1] += stance_shift; // Przesuw o 1/3 do ty≈Çu
 * }
 * ```
 */

/**
 * @brief Mapowanie sprzƒôtowe z offsetami bioder
 *
 * **Wewnƒôtrzna struktura mapowania:**
 * ```c
 * typedef struct {
 *     uint8_t base_channel;  // Bazowy kana≈Ç PCA9685 (0, 3, 6)
 *     float hip_offset_deg;  // Offset biodra z URDF [stopnie]
 *     bool is_left_side;     // true = I2C1, false = I2C2
 * } LegMapping_t;
 *
 * static const LegMapping_t leg_mapping[6] = {
 *     {0, 37.5f, true},   // Noga 1: I2C1[0-2], +37.5¬∞
 *     {0, -37.5f, false}, // Noga 2: I2C2[0-2], -37.5¬∞
 *     {3, 0.0f, true},    // Noga 3: I2C1[3-5], 0¬∞
 *     {3, 0.0f, false},   // Noga 4: I2C2[3-5], 0¬∞
 *     {6, -37.5f, true},  // Noga 5: I2C1[6-8], -37.5¬∞
 *     {6, 37.5f, false}   // Noga 6: I2C2[6-8], +37.5¬∞
 * };
 * ```
 *
 * **Automatyczne uwzglƒôdnienie offset√≥w:**
 * ```c
 * float hip_deg = (q1 * 180.0f / M_PI) + mapping->hip_offset_deg;
 * float servo_hip = 90.0f + hip_deg;  // Mapowanie na servo
 * PCA9685_SetServoAngle(pca_to_use, mapping->base_channel + 0, servo_hip);
 * ```
 */

/** @} */ // end of Bipedal_Implementation

#endif // BIPEDAL_GAIT_H